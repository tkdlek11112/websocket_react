// source: data/Login.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.sec.LoginReq', null, global);
goog.exportSymbol('proto.sec.LoginReq.LoginIn', null, global);
goog.exportSymbol('proto.sec.LoginRes', null, global);
goog.exportSymbol('proto.sec.LoginRes.LoginOut', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sec.LoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sec.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sec.LoginReq.displayName = 'proto.sec.LoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sec.LoginReq.LoginIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sec.LoginReq.LoginIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sec.LoginReq.LoginIn.displayName = 'proto.sec.LoginReq.LoginIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sec.LoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sec.LoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sec.LoginRes.displayName = 'proto.sec.LoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sec.LoginRes.LoginOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sec.LoginRes.LoginOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sec.LoginRes.LoginOut.displayName = 'proto.sec.LoginRes.LoginOut';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sec.LoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sec.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sec.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonHeader: (f = msg.getCommonHeader()) && common_common_pb.CommonHeader.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.sec.LoginReq.LoginIn.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sec.LoginReq}
 */
proto.sec.LoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sec.LoginReq;
  return proto.sec.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sec.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sec.LoginReq}
 */
proto.sec.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.CommonHeader;
      reader.readMessage(value,common_common_pb.CommonHeader.deserializeBinaryFromReader);
      msg.setCommonHeader(value);
      break;
    case 2:
      var value = new proto.sec.LoginReq.LoginIn;
      reader.readMessage(value,proto.sec.LoginReq.LoginIn.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sec.LoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sec.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sec.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_common_pb.CommonHeader.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sec.LoginReq.LoginIn.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sec.LoginReq.LoginIn.prototype.toObject = function(opt_includeInstance) {
  return proto.sec.LoginReq.LoginIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sec.LoginReq.LoginIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginReq.LoginIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sec.LoginReq.LoginIn}
 */
proto.sec.LoginReq.LoginIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sec.LoginReq.LoginIn;
  return proto.sec.LoginReq.LoginIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sec.LoginReq.LoginIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sec.LoginReq.LoginIn}
 */
proto.sec.LoginReq.LoginIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sec.LoginReq.LoginIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sec.LoginReq.LoginIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sec.LoginReq.LoginIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginReq.LoginIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string login_token = 1;
 * @return {string}
 */
proto.sec.LoginReq.LoginIn.prototype.getLoginToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sec.LoginReq.LoginIn} returns this
 */
proto.sec.LoginReq.LoginIn.prototype.setLoginToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CommonHeader common_header = 1;
 * @return {?proto.sec.CommonHeader}
 */
proto.sec.LoginReq.prototype.getCommonHeader = function() {
  return /** @type{?proto.sec.CommonHeader} */ (
    jspb.Message.getWrapperField(this, common_common_pb.CommonHeader, 1));
};


/**
 * @param {?proto.sec.CommonHeader|undefined} value
 * @return {!proto.sec.LoginReq} returns this
*/
proto.sec.LoginReq.prototype.setCommonHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sec.LoginReq} returns this
 */
proto.sec.LoginReq.prototype.clearCommonHeader = function() {
  return this.setCommonHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sec.LoginReq.prototype.hasCommonHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LoginIn data = 2;
 * @return {?proto.sec.LoginReq.LoginIn}
 */
proto.sec.LoginReq.prototype.getData = function() {
  return /** @type{?proto.sec.LoginReq.LoginIn} */ (
    jspb.Message.getWrapperField(this, proto.sec.LoginReq.LoginIn, 2));
};


/**
 * @param {?proto.sec.LoginReq.LoginIn|undefined} value
 * @return {!proto.sec.LoginReq} returns this
*/
proto.sec.LoginReq.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sec.LoginReq} returns this
 */
proto.sec.LoginReq.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sec.LoginReq.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sec.LoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.sec.LoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sec.LoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonHeader: (f = msg.getCommonHeader()) && common_common_pb.CommonHeader.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && common_common_pb.Message.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.sec.LoginRes.LoginOut.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sec.LoginRes}
 */
proto.sec.LoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sec.LoginRes;
  return proto.sec.LoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sec.LoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sec.LoginRes}
 */
proto.sec.LoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.CommonHeader;
      reader.readMessage(value,common_common_pb.CommonHeader.deserializeBinaryFromReader);
      msg.setCommonHeader(value);
      break;
    case 2:
      var value = new common_common_pb.Message;
      reader.readMessage(value,common_common_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.sec.LoginRes.LoginOut;
      reader.readMessage(value,proto.sec.LoginRes.LoginOut.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sec.LoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sec.LoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sec.LoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_common_pb.CommonHeader.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sec.LoginRes.LoginOut.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sec.LoginRes.LoginOut.prototype.toObject = function(opt_includeInstance) {
  return proto.sec.LoginRes.LoginOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sec.LoginRes.LoginOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginRes.LoginOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    appUserId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sec.LoginRes.LoginOut}
 */
proto.sec.LoginRes.LoginOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sec.LoginRes.LoginOut;
  return proto.sec.LoginRes.LoginOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sec.LoginRes.LoginOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sec.LoginRes.LoginOut}
 */
proto.sec.LoginRes.LoginOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sec.LoginRes.LoginOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sec.LoginRes.LoginOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sec.LoginRes.LoginOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sec.LoginRes.LoginOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string app_user_id = 1;
 * @return {string}
 */
proto.sec.LoginRes.LoginOut.prototype.getAppUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sec.LoginRes.LoginOut} returns this
 */
proto.sec.LoginRes.LoginOut.prototype.setAppUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CommonHeader common_header = 1;
 * @return {?proto.sec.CommonHeader}
 */
proto.sec.LoginRes.prototype.getCommonHeader = function() {
  return /** @type{?proto.sec.CommonHeader} */ (
    jspb.Message.getWrapperField(this, common_common_pb.CommonHeader, 1));
};


/**
 * @param {?proto.sec.CommonHeader|undefined} value
 * @return {!proto.sec.LoginRes} returns this
*/
proto.sec.LoginRes.prototype.setCommonHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sec.LoginRes} returns this
 */
proto.sec.LoginRes.prototype.clearCommonHeader = function() {
  return this.setCommonHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sec.LoginRes.prototype.hasCommonHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Message message = 2;
 * @return {?proto.sec.Message}
 */
proto.sec.LoginRes.prototype.getMessage = function() {
  return /** @type{?proto.sec.Message} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Message, 2));
};


/**
 * @param {?proto.sec.Message|undefined} value
 * @return {!proto.sec.LoginRes} returns this
*/
proto.sec.LoginRes.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sec.LoginRes} returns this
 */
proto.sec.LoginRes.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sec.LoginRes.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LoginOut data = 3;
 * @return {?proto.sec.LoginRes.LoginOut}
 */
proto.sec.LoginRes.prototype.getData = function() {
  return /** @type{?proto.sec.LoginRes.LoginOut} */ (
    jspb.Message.getWrapperField(this, proto.sec.LoginRes.LoginOut, 3));
};


/**
 * @param {?proto.sec.LoginRes.LoginOut|undefined} value
 * @return {!proto.sec.LoginRes} returns this
*/
proto.sec.LoginRes.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sec.LoginRes} returns this
 */
proto.sec.LoginRes.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sec.LoginRes.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.sec);
